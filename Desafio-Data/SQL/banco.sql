-- MySQL Script generated by MySQL Workbench
-- Sun May 28 14:45:24 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Data-AdventureWorks
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Data-AdventureWorks
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Data-AdventureWorks` DEFAULT CHARACTER SET utf8 ;
USE `Data-AdventureWorks` ;

-- -----------------------------------------------------
-- Criação da Tabela Territories
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`territories` (
  `SalesTerritoryKey` INT NOT NULL,
  `Region` VARCHAR(255) NOT NULL,
  `Country` VARCHAR(255) NOT NULL,
  `Continent` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`SalesTerritoryKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Calendario
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`calendar` (
  `Date` DATE NOT NULL,
  PRIMARY KEY (`Date`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Customer
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`customer` (
  `CustomerKey` INT NOT NULL,
  `Prefix` VARCHAR(45) NOT NULL,
  `FirstName` VARCHAR(60) NOT NULL,
  `LastName` VARCHAR(60) NOT NULL,
  `BirthDate` VARCHAR(60) NOT NULL,
  `MaritalStatus` VARCHAR(10) NOT NULL,
  `Gender` VARCHAR(10) NOT NULL,
  `EmailAddress` VARCHAR(255) NOT NULL,
  `AnnualIncome` VARCHAR(45) NOT NULL,
  `TotalChildren` VARCHAR(10) NOT NULL,
  `EducationLevel` VARCHAR(255) NOT NULL,
  `Occupation` VARCHAR(255) NOT NULL,
  `HomeOwner` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`CustomerKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Product_Categories
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`product_category` (
  `ProductCategoryKey` INT NOT NULL,
  `CategoryName` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`ProductCategoryKey`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Product_SubCategories
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`product_subcategories` (
  `ProductSubCategoryKey` INT NOT NULL,
  `SubCategoryName` VARCHAR(60) NOT NULL,
  `ProductCategoryKey` INT NOT NULL,
  PRIMARY KEY (`ProductSubCategoryKey`),
  INDEX `product_subcategories_fk_1_idx` (`ProductCategoryKey` ASC) VISIBLE,
  CONSTRAINT `product_subcategories_fk_1`
    FOREIGN KEY (`ProductCategoryKey`)
    REFERENCES `Data-AdventureWorks`.`product_category` (`ProductCategoryKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Products
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`products` (
  `ProductKey` INT NOT NULL,
  `ProductSubCategoryKey` INT NOT NULL,
  `ProductSKU` VARCHAR(20) NOT NULL,
  `ProductName` VARCHAR(255) NOT NULL,
  `ModelName` VARCHAR(255) NOT NULL,
  `ProductDescription` VARCHAR(255) NOT NULL,
  `ProductColor` VARCHAR(45) NOT NULL,
  `ProductSize` VARCHAR(45) NOT NULL,
  `ProductStyle` CHAR NOT NULL,
  `ProductCost` FLOAT NOT NULL,
  `ProductPrice` FLOAT NOT NULL,
  PRIMARY KEY (`ProductKey`),
  INDEX `products_fk_1_idx` (`ProductSubCategoryKey` ASC) VISIBLE,
  CONSTRAINT `products_fk_1`
    FOREIGN KEY (`ProductSubCategoryKey`)
    REFERENCES `Data-AdventureWorks`.`product_subcategories` (`ProductSubCategoryKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Returns
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`returns` (
  `ReturnDate` DATE NOT NULL,
  `TerritoryKey` INT NOT NULL,
  `ProductKey` INT NOT NULL,
  `ReturnQuantity` INT NOT NULL,
  INDEX `returns_fk_1_idx` (`TerritoryKey` ASC) VISIBLE,
  INDEX `returns_fk_2_idx` (`ProductKey` ASC) VISIBLE,
  CONSTRAINT `returns_fk_1`
    FOREIGN KEY (`TerritoryKey`)
    REFERENCES `Data-AdventureWorks`.`territories` (`SalesTerritoryKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `returns_fk_2`
    FOREIGN KEY (`ProductKey`)
    REFERENCES `Data-AdventureWorks`.`products` (`ProductKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Criação da Tabela Sales
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Data-AdventureWorks`.`sales` (
  `OrderDate` DATE NOT NULL,
  `StockDate` DATE NOT NULL,
  `OrderNumber` VARCHAR(10) NOT NULL,
  `ProductKey` INT NOT NULL,
  `CustomerKey` INT NOT NULL,
  `TerritoryKey` INT NOT NULL,
  `OrderLineItem` INT NOT NULL,
  `OrderQuantity` INT NOT NULL,
  INDEX `sales_fk_1_idx` (`ProductKey` ASC) VISIBLE,
  INDEX `sales_fk_2_idx` (`CustomerKey` ASC) VISIBLE,
  INDEX `sales_fk_3_idx` (`TerritoryKey` ASC) VISIBLE,
  INDEX `sales_fk_4_idx` (`OrderDate` ASC) VISIBLE,
  CONSTRAINT `sales_fk_1`
    FOREIGN KEY (`ProductKey`)
    REFERENCES `Data-AdventureWorks`.`products` (`ProductKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `sales_fk_2`
    FOREIGN KEY (`CustomerKey`)
    REFERENCES `Data-AdventureWorks`.`customer` (`CustomerKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `sales_fk_3`
    FOREIGN KEY (`TerritoryKey`)
    REFERENCES `Data-AdventureWorks`.`territories` (`SalesTerritoryKey`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `sales_fk_4`
    FOREIGN KEY (`OrderDate`)
    REFERENCES `Data-AdventureWorks`.`calendar` (`Date`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


use `Data-AdventureWorks`;


-- Query 1
-- ---------------------------------------------------------
-- Quais são os 10 produtos mais vendidos (em quantidade) na
-- categoria "Bicicletas"?
-- ---------------------------------------------------------

/*
O código realiza uma consulta em um banco de dados para obter os 10 produtos mais vendidos na categoria "Bikes".

A consulta utiliza as tabelas "products", "sales" e "product_category" para realizar os joins necessários. 
A condição JOIN é estabelecida através das chaves de relacionamento entre as tabelas.

A cláusula WHERE é utilizada para filtrar apenas os produtos que pertencem à categoria "Bikes", com base no nome da categoria.

Os resultados são agrupados pelo ID do produto (ProductKey) utilizando o comando GROUP BY. 
A função SUM() é utilizada para calcular o total vendido de cada produto, somando a coluna "OrderQuantity" da tabela "sales" para cada produto.

Os resultados são ordenados em ordem decrescente com base no total vendido utilizando ORDER BY, e o comando 
LIMIT 10 é usado para retornar apenas os 10 primeiros registros, ou seja, os 10 produtos mais vendidos na categoria "Bikes".

*/


SELECT p.productname AS produto, SUM(v.OrderQuantity) AS total_vendido
FROM products as p
JOIN sales as v ON p.ProductKey  = v.ProductKey 
JOIN product_category c ON p.ProductSubCategoryKey  = c.productcategorykey
WHERE c.categoryname = 'Bikes'
GROUP BY p.ProductKey 
ORDER BY total_vendido DESC
LIMIT 10;

-- Query 2
-- --------------------------------------------------------------
-- Qual é o cliente que tem o maior número de pedidos realizados?
-- --------------------------------------------------------------

/*
realiza uma consulta em um banco de dados para obter o cliente com o maior número total de pedidos.

A consulta utiliza a função CONCAT() para combinar o primeiro nome e o sobrenome do cliente em uma única coluna chamada "Cliente". 
Em seguida, utiliza a função COUNT() para contar o número de pedidos (baseado na coluna "orderNumber") para cada cliente.

Os resultados são agrupados pelo ID do cliente (CustomerKey) utilizando o comando GROUP BY. 
Em seguida, são ordenados em ordem decrescente com base no número total de pedidos utilizando ORDER BY. 
O comando LIMIT 1 é usado para retornar apenas o primeiro registro, ou seja, o cliente com o maior número de pedidos.

*/


SELECT concat(c.FirstName, ' ', c.LastName) AS Cliente, count(s.orderNumber) AS Total_Pedidos
FROM customer as c
JOIN sales as s ON c.CustomerKey  = s.CustomerKey 
GROUP BY c.CustomerKey 
ORDER BY total_pedidos desc 
LIMIT 1;

-- Query 3
-- --------------------------------------------------------
-- Em qual mês do ano ocorrem mais vendas (em valor total)?
-- --------------------------------------------------------

/*
realiza uma consulta em um banco de dados para obter o mês com o maior valor total de vendas.

A consulta utiliza a função MONTH() para extrair o mês da coluna OrderDate da tabela sales. 
Em seguida, calcula o valor total das vendas multiplicando o preço do produto pela quantidade vendida e somando os resultados, 
utilizando a função SUM().

Os resultados são agrupados pelo mês e ordenados em ordem decrescente com base no valor total. 
O comando LIMIT 1 é usado para retornar apenas o primeiro registro, ou seja, o mês com o maior valor de vendas.

*/


SELECT MONTH(s.OrderDate) AS mês, SUM(p.ProductPrice * s.OrderQuantity) AS valor_total
FROM sales as s
JOIN products as p ON s.ProductKey  = p.ProductKey 
GROUP BY mês
ORDER BY valor_total desc 
LIMIT 1;

-- Query 4
-- -----------------------------------------------------------
-- Quais vendedores tiveram vendas com valor acima da média no
-- último ano fiscal?
-- -----------------------------------------------------------

/*

O código realiza uma consulta em um banco de dados para obter a região, país e a média de vendas por região, 
considerando apenas as regiões com média de vendas acima da média geral.

O código utiliza subconsultas para calcular a média de vendas por região e país. 
A primeira subconsulta calcula a média de vendas (preço do produto multiplicado pela quantidade vendida) agrupada por região e país. 
Em seguida, utiliza a função ROW_NUMBER() para atribuir um número de linha a cada registro dentro de cada região, 
ordenando-os pela média de vendas em ordem decrescente.

A segunda subconsulta calcula a média geral de vendas mensais. Em seguida, compara a média de vendas por região e país com a 
média geral e seleciona apenas as regiões com média de vendas acima da média geral.

A consulta principal filtra os resultados para retornar apenas o registro com o maior valor de média de
vendas por região (row_num = 1) e ordena os resultados em ordem decrescente com base na média de vendas.

*/ 


SELECT Region, Country, ROUND(media_vendas, 2) AS media_vendas
FROM (
    SELECT Region, Country, media_vendas,
           ROW_NUMBER() OVER (PARTITION BY Region ORDER BY media_vendas DESC) AS row_num
    FROM (
        SELECT Region, Country, AVG(p.ProductPrice * s.OrderQuantity) AS media_vendas
        FROM territories AS t
        LEFT JOIN sales AS s ON t.SalesTerritoryKey = s.TerritoryKey
        LEFT JOIN products AS p ON s.ProductKey = p.ProductKey
        GROUP BY Region, Country
    ) AS vendas_por_regiao
    WHERE media_vendas > (
        SELECT AVG(media_vendas)
        FROM (
            SELECT AVG(p.ProductPrice * s.OrderQuantity) AS media_vendas
            FROM sales AS s
            JOIN products AS p ON s.ProductKey = p.ProductKey
            GROUP BY MONTH(s.OrderDate)
        ) AS media_mensal
    )
) AS vendas_numeradas
WHERE row_num = 1
ORDER BY media_vendas DESC;

-- Query EXTRA
-- -----------------------------------------------------------
-- Quais são os 10 produtos menos vendidos?
-- -----------------------------------------------------------

/*
O código combina informações das tabelas product_subcategories, products e sales através de junções (JOINs).

A consulta agrupa os resultados pelo nome da subcategoria e nome do produto. 
Em seguida, calcula a soma das quantidades vendidas (Total_Vendido) usando a função SUM() da coluna OrderQuantity da tabela sales.

Os resultados são ordenados em ordem crescente com base no total vendido e limitados a 10 registros usando ORDER BY e LIMIT."
*/


SELECT ps.SubCategoryName as Sub_Categoria, p.ProductName as Nome_Produto, SUM(s.OrderQuantity) AS Total_Vendido
FROM product_subcategories as ps
JOIN products AS p ON ps.ProductSubCategoryKey  = p.ProductSubCategoryKey 
JOIN sales AS s ON p.ProductKey = s.ProductKey
GROUP BY ps.SubCategoryName, p.ProductName
ORDER BY Total_Vendido asc
LIMIT 10;